blueprint:
  name: Lock Door on Canceled or No Active Event (8 Hour Window, with Buffer)
  description: >
    Periodically retrieves a list of events for the next 8 hours using the calendar.get_events service.
    It iterates over the events to determine if any event is activeâ€”that is, if the current time is between
    the event's start time minus the upcoming buffer and the event's end time plus the past buffer,
    and its summary contains the door keyword (from an input_text helper) as a full word and does not contain the cancellation keyword.
    If no such event is found, the automation locks the door.
  domain: automation
  input:
    calendar_entity:
      name: Calendar Entity
      description: Select the calendar to monitor.
      selector:
        entity:
          domain: calendar
    cancellation_keyword:
      name: Cancellation Keyword
      description: The keyword that indicates an event is canceled.
      default: "canceled"
      selector:
        text: {}
    door_keyword_input:
      name: Door Keyword Input Text
      description: >
        Select the input_text entity that stores the door keyword.
        Its current state will be used to check each event's summary as a full word.
      default: "*"
      selector:
        entity:
          domain: input_text
    upcoming_buffer:
      name: Upcoming Buffer
      description: >
        Duration before an event's start during which the event is still considered active (e.g., 00:30:00 for 30 minutes).
      default: "00:30:00"
      selector:
        duration: {}
    past_buffer:
      name: Past Buffer
      description: >
        Duration after an event's end during which the event is still considered active (e.g., 00:15:00 for 15 minutes).
      default: "00:15:00"
      selector:
        duration: {}
    door_lock_entity:
      name: Door Lock Entity
      description: The door lock to check. This automation only runs if it's currently unlocked.
      selector:
        entity:
          domain: lock
    door_lock_rule_select:
      name: Door Lock Rule Select Entity
      description: The select entity that controls the door lock mode (setting to "reset" locks the door).
      selector:
        entity:
          domain: select
    notify_device:
      name: Notification Device
      description: Select the mobile device for notifications.
      selector:
        device:
          integration: mobile_app
    check_frequency:
      name: Check Frequency (Minutes)
      description: How frequently (in minutes) the automation should run.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes

trigger:
  - platform: time_pattern
    minutes: !input check_frequency

action:
  - service: calendar.get_events
    target:
      entity_id: !input calendar_entity
    data:
      duration:
        hours: 8
        minutes: 0
        seconds: 0
    response_variable: event_list

  - condition: state
    entity_id: !input door_lock_entity
    state: "unlocked"

  - condition: template
    value_template: >
      {% set now_naive = now().replace(tzinfo=None) %}
      {% set upcoming_buffer_sec = (upcoming_buffer.split(':')[0]|int * 3600) + (upcoming_buffer.split(':')[1]|int * 60) + (upcoming_buffer.split(':')[2]|int) %}
      {% set past_buffer_sec = (past_buffer.split(':')[0]|int * 3600) + (past_buffer.split(':')[1]|int * 60) + (past_buffer.split(':')[2]|int) %}
      {% set cancel_kw = cancellation_keyword | lower %}
      {% set door_kw = states(door_keyword_input) | lower %}
      {% set cal_id = calendar_entity %}
      {% set valid_active = false %}
      {% if event_list and event_list[cal_id] and event_list[cal_id].events %}
        {% for event in event_list[cal_id].events %}
          {% set event_start = as_datetime(event.start).replace(tzinfo=None) %}
          {% set event_end = as_datetime(event.end).replace(tzinfo=None) %}
          {% set active_start = event_start - timedelta(seconds=upcoming_buffer_sec) %}
          {% set active_end = event_end + timedelta(seconds=past_buffer_sec) %}
          {% if now_naive >= active_start and now_naive <= active_end %}
            {% if (event.summary | lower).find(cancel_kw) == -1 and (event.summary | regex_search('\\b' ~ door_kw ~ '\\b')) %}
              {% set valid_active = true %}
            {% endif %}
          {% endif %}
        {% endfor %}
      {% endif %}
      {{ not valid_active }}

  - service: select.select_option
    target:
      entity_id: !input door_lock_rule_select
    data:
      option: "reset"

  - service: notify.notify
    data:
      title: "Lock Door: No Valid Active Event"
      message: "No valid active event detected (or all active events are canceled). Door is now locked."
    target:
      device_id: !input notify_device

mode: single
