blueprint:
  name: Periodic Door Unlock Fail-Safe (Unlock Only) with Duration Frequency
  description: >
    Periodically checks the selected calendar for an active event that contains the door keyword
    (stored in an input_text helper) and does NOT contain a cancellation keyword.
    If such an active event is detected and the door (specified by the door lock entity)
    is locked, the automation unlocks the door by setting the door lock rule to "keep_unlock"
    and sends a notification to a selected mobile device.
  domain: automation
  input:
    check_frequency:
      name: Check Frequency
      description: >
        How frequently the automation should check for an active event that requires the door to be unlocked.
        Enter the duration in HH:MM:SS format.
      default: "00:01:00"
      selector:
        duration: {}
    calendar_entity:
      name: Calendar Entity
      description: Select the calendar to monitor for events.
      selector:
        entity:
          domain: calendar
    input_text_keyword:
      name: Door Keyword Input Text
      description: >
        Select the input_text entity that stores the door keyword.
        Its current state will be used to check the event summary.
      default: "*"
      selector:
        entity:
          domain: input_text
    cancellation_keyword:
      name: Cancellation Keyword
      description: Enter the keyword that indicates an event is canceled.
      default: "canceled"
      selector:
        text: {}
    door_lock_entity:
      name: Door Lock Entity
      description: The door lock to check. The automation will only unlock the door if it's currently locked.
      selector:
        entity:
          domain: lock
    door_lock_rule_select:
      name: Door Lock Rule Select Entity
      description: The select entity that controls the door lock mode.
      selector:
        entity:
          domain: select
    notify_device:
      name: Notification Device
      description: Select the mobile device to send notifications to.
      selector:
        device:
          integration: mobile_app

trigger:
  - platform: time_pattern
    # Convert the duration (HH:MM:SS) to total seconds.
    seconds: "/{{ (((!input check_frequency).split(':')[0] | int) * 3600) + (((!input check_frequency).split(':')[1] | int) * 60) + ((!input check_frequency).split(':')[2] | int) }}"

condition:
  - condition: state
    entity_id: !input door_lock_entity
    state: "locked"
  - condition: template
    value_template: >
      {% set start_time = state_attr(!input calendar_entity, 'start_time') %}
      {% set end_time = state_attr(!input calendar_entity, 'end_time') %}
      {% set message = (state_attr(!input calendar_entity, 'message') | default('')) | lower %}
      {% set door_kw = states(!input input_text_keyword) | lower %}
      {% set cancel_kw = (!input cancellation_keyword) | lower %}
      {% set now_naive = now().replace(tzinfo=None) %}
      {% if start_time and end_time %}
        {% set event_active = now_naive >= as_datetime(start_time).replace(tzinfo=None) and now_naive <= as_datetime(end_time).replace(tzinfo=None) %}
      {% else %}
        {% set event_active = false %}
      {% endif %}
      {{ event_active and (message | regex_search('\\b' ~ door_kw ~ '\\b')) and not (message | regex_search('\\b' ~ cancel_kw ~ '\\b')) }}

action:
  - service: select.select_option
    target:
      entity_id: !input door_lock_rule_select
    data:
      option: "keep_unlock"
  - service: notify.notify
    data:
      title: "Fail-Safe: Door Unlocked"
      message: >
        At {{ now().strftime('%H:%M:%S') }}, an active event requiring door unlock was detected.
        The door has been unlocked.
    target:
      device_id: !input notify_device

mode: single
